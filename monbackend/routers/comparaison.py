from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from database import get_db
from models import Prediction, Resultat, Consommation

router = APIRouter()

@router.get("/comparaison_prediction_reel")
def comparaison_prediction_reel(db: Session = Depends(get_db)):
    try:
        # üîÅ Parcourir toutes les pr√©dictions, de la plus r√©cente √† la plus ancienne
        predictions = db.query(Prediction).order_by(Prediction.date_creation.desc()).all()

        for prediction in predictions:
            resultats = db.query(Resultat).filter_by(id_prediction=prediction.id_prediction).all()
            if not resultats:
                continue  # skip si aucune pr√©diction associ√©e

            # ‚úÖ V√©rifier qu'au moins un mois de cette pr√©diction a des donn√©es r√©elles
            consommation_dispo = False
            for res in resultats:
                if db.query(Consommation).filter_by(mois=res.mois, annee=res.annee).first():
                    consommation_dispo = True
                    break

            if not consommation_dispo:
                continue  # pas de donn√©es r√©elles ‚Üí on passe √† la pr√©c√©dente

            # ‚úÖ Construire le tableau final avec tous les mois de la pr√©diction
            comparaison = []
            for res in resultats:
                mois = res.mois
                annee = res.annee
                date_str = f"{annee}-{mois:02d}"

                # Chercher les consommations pour ce mois/ann√©e
                consommations = db.query(Consommation).filter_by(mois=mois, annee=annee).all()
                valeur_reelle = None
                if consommations:
                    valeur_reelle = sum(c.valeur for c in consommations)

                comparaison.append({
                    "date": date_str,
                    "predicted": round(res.valeur, 2),
                    "real": round(valeur_reelle, 2) if valeur_reelle is not None else None
                })

            return comparaison  # ‚úÖ D√®s qu'une pr√©diction avec au moins un mois r√©el est trouv√©e

        # ‚ùå Si aucune pr√©diction avec au moins un mois r√©el n‚Äôest trouv√©e
        raise HTTPException(status_code=404, detail="Aucune pr√©diction avec donn√©es r√©elles trouv√©e.")

    except Exception as e:
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Erreur serveur : {str(e)}")